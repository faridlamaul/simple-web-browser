/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package simple.web.browser;
 
import java.io.*;
import java.net.*;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
 
public class App {
 
    public static String urlNow = "";
 
    public static void main(String[] args) {
//        Scanner userInput = new Scanner(System.in);
//        String urlNow = "";
 
        System.out.println("============== Simple Web Browser ==============");
//        System.out.println("Silahkan pilih menu :\n1. Buka web dengan link\n2. Lihat list clickable links\n3. Download file contoh");
 
//        int chosenNumber = userInput.nextInt();
        Scanner userLink = new Scanner(System.in);
        System.out.println("Silahkan masukkan link yang ingin dibuka : ");
        String link = userLink.nextLine();
        UrlContent(link);
        System.out.println("Clickable Links : \n");
        System.out.println(extractAnchorLinks(urlNow));
//        System.out.println(link);
        testDownload(link);
    }
 
    public static void UrlContent(String urlInput) {
        try {
            Socket socket = new Socket(urlInput, 80);
            String protocols = "GET / HTTP/1.1\r\nHost: " + urlInput + "\r\n\r\n ";
            System.out.println(protocols);
 
            BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());
            BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());
 
            bos.write(protocols.getBytes());
            bos.flush();
 
            int bufferSize = 100;
            byte[] bResp = new byte[bufferSize];
            int c = bis.read(bResp);
            String resp = "";
 
            while(c != -1) {
                resp += (new String(bResp));
                bResp = new byte[bufferSize];
                c = bis.read(bResp);
 
            }
            System.out.println(resp);
            urlNow += resp;
 
            socket.close();
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 
    public static List<String> extractAnchorLinks(String string) {
        List<String> anchorLinkList = new ArrayList<String>();
        final String TAG = "a href=\"";
        final int TAG_LENGTH = TAG.length();
        int startIndex = 0, endIndex = 0;
        String nextSubstring = "";
        do {
            startIndex = string.indexOf(TAG);
            if (startIndex != -1) {
                nextSubstring = string.substring(startIndex + TAG_LENGTH);
                endIndex = nextSubstring.indexOf("\">");
                if (endIndex != -1) {
                    anchorLinkList.add(nextSubstring.substring(0, endIndex));
                }
                string = nextSubstring;
            }
        } while (startIndex != -1 && endIndex != -1);
        return anchorLinkList;
    }
 
    private static Path download(String sourceURL, String targetDirectory) throws IOException
    {
        URL url = new URL(sourceURL);
        String fileName = sourceURL.substring(sourceURL.lastIndexOf('/') + 1, sourceURL.length());
        Path targetPath = new File(targetDirectory + File.separator + fileName).toPath();
        Files.copy(url.openStream(), targetPath, StandardCopyOption.REPLACE_EXISTING);
 
        return targetPath;
    }
 
    private static void testDownload (String urlGais) {
        URL website = null;
        try {
            website = new URL("http://" + urlGais);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        ReadableByteChannel rbc = null;
        try {
            rbc = Channels.newChannel(website.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream("information.html");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        try {
            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}